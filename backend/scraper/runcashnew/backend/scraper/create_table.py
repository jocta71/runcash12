#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para criar a tabela roleta_numeros no Supabase
"""

import os
import logging
from dotenv import load_dotenv
from supabase import create_client

# Configuração de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('criar_tabela')

# Carregar variáveis de ambiente
load_dotenv()

# Configuração do Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

# SQL para criar a tabela
CREATE_TABLE_SQL = """
-- Criação da tabela roleta_numeros para armazenar os números das roletas
CREATE TABLE IF NOT EXISTS roleta_numeros (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  roleta_id TEXT NOT NULL,
  roleta_nome TEXT NOT NULL,
  numero INTEGER NOT NULL CHECK (numero >= 0 AND numero <= 36),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Índices para melhorar a performance das consultas
CREATE INDEX IF NOT EXISTS idx_roleta_numeros_roleta_id ON roleta_numeros(roleta_id);
CREATE INDEX IF NOT EXISTS idx_roleta_numeros_numero ON roleta_numeros(numero);
CREATE INDEX IF NOT EXISTS idx_roleta_numeros_created_at ON roleta_numeros(created_at);

-- Comentários para documentar a tabela
COMMENT ON TABLE roleta_numeros IS 'Armazena os números extraídos de cada roleta';
COMMENT ON COLUMN roleta_numeros.roleta_id IS 'ID da roleta';
COMMENT ON COLUMN roleta_numeros.roleta_nome IS 'Nome da roleta para facilitar consultas';
COMMENT ON COLUMN roleta_numeros.numero IS 'Número extraído da roleta (0-36)';
COMMENT ON COLUMN roleta_numeros.created_at IS 'Data e hora em que o número foi extraído';
"""

# Função para criar a tabela
def criar_tabela_roleta_numeros():
    """
    Cria a tabela roleta_numeros no Supabase
    """
    # Garantir que a URL do Supabase esteja corretamente formatada
    supabase_url = SUPABASE_URL
    if supabase_url.startswith('@'):
        supabase_url = supabase_url[1:]
    if not supabase_url.startswith('http'):
        supabase_url = f"https://{supabase_url}"
    
    try:
        # Inicializar cliente Supabase
        supabase = create_client(supabase_url, SUPABASE_KEY)
        logger.info(f"Cliente Supabase inicializado com sucesso: {supabase_url}")
        
        # Executar SQL
        logger.info("Executando SQL para criar a tabela roleta_numeros...")
        response = supabase.postgrest.rpc('sql', {'command': CREATE_TABLE_SQL}).execute()
        
        logger.info("Tabela roleta_numeros criada com sucesso!")
        
        # Criar o trigger para limitar o número de registros
        criar_trigger(supabase)
        
        return True
    except Exception as e:
        logger.error(f"Erro ao criar tabela: {str(e)}")
        return False

def criar_trigger(supabase):
    """
    Cria a função e trigger para limitar o número de registros
    """
    try:
        # SQL para criar a função e o trigger
        trigger_sql = """
        -- Função para limitar o número de registros por roleta
        CREATE OR REPLACE FUNCTION limit_roleta_numeros() RETURNS TRIGGER AS $$
        DECLARE
          max_records_per_roleta INTEGER := 1000; -- Limite de 1000 números por roleta
          current_count INTEGER;
          oldest_records RECORD;
        BEGIN
          -- Contar quantos registros existem para esta roleta
          SELECT COUNT(*) INTO current_count 
          FROM roleta_numeros 
          WHERE roleta_id = NEW.roleta_id;
          
          -- Se exceder o limite, remover os registros mais antigos
          IF current_count >= max_records_per_roleta THEN
            FOR oldest_records IN (
              SELECT id FROM roleta_numeros 
              WHERE roleta_id = NEW.roleta_id 
              ORDER BY created_at ASC 
              LIMIT (current_count - max_records_per_roleta + 1)
            ) LOOP
              DELETE FROM roleta_numeros WHERE id = oldest_records.id;
            END LOOP;
          END IF;
          
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

        -- Trigger para limitar o número de registros
        DROP TRIGGER IF EXISTS trigger_limit_roleta_numeros ON roleta_numeros;
        CREATE TRIGGER trigger_limit_roleta_numeros
        AFTER INSERT ON roleta_numeros
        FOR EACH ROW
        EXECUTE FUNCTION limit_roleta_numeros();
        """
        
        logger.info("Criando função e trigger para limitar registros...")
        response = supabase.postgrest.rpc('sql', {'command': trigger_sql}).execute()
        
        logger.info("Função e trigger criados com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro ao criar função e trigger: {str(e)}")
        return False

if __name__ == "__main__":
    criar_tabela_roleta_numeros() 